'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('node:fs');
var require$$5 = require('node:module');
var os = require('node:os');
var path = require('node:path');
var require$$0 = require('node:url');
var registryConstants = require('../external/@socketsecurity/registry/lib/constants');

var _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;
const require$1 = require$$5.createRequire((typeof document === 'undefined' ? require$$0.pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('constants.js', document.baseURI).href)));
const __filename$1 = require$$0.fileURLToPath((typeof document === 'undefined' ? require$$0.pathToFileURL(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('constants.js', document.baseURI).href)));
// Using `path.dirname(__filename)` to resolve `__dirname` works for both 'dist'
// AND 'src' directories because constants.js and constants.mts respectively are
// in the root of each.
const __dirname$1 = path.dirname(__filename$1);
const {
  AT_LATEST,
  BIOME_JSON,
  BUN,
  CI,
  COLUMN_LIMIT,
  DOT_GIT_DIR,
  DOT_SOCKET_DIR,
  EMPTY_FILE,
  EMPTY_VALUE,
  ESLINT_CONFIG_JS,
  ESNEXT,
  EXT_CJS,
  EXT_CMD,
  EXT_CTS,
  EXT_DTS,
  EXT_JS,
  EXT_JSON,
  EXT_LOCK,
  EXT_LOCKB,
  EXT_MD,
  EXT_MJS,
  EXT_MTS,
  EXT_PS1,
  EXT_YAML,
  EXT_YML,
  EXTENSIONS,
  EXTENSIONS_JSON,
  GITIGNORE,
  DOT_PACKAGE_LOCK_JSON,
  LATEST,
  LICENSE,
  LICENSE_GLOB,
  LICENSE_GLOB_RECURSIVE,
  LICENSE_ORIGINAL,
  LICENSE_ORIGINAL_GLOB,
  LICENSE_ORIGINAL_GLOB_RECURSIVE,
  LOOP_SENTINEL,
  MANIFEST_JSON,
  MIT,
  NODE_AUTH_TOKEN,
  NODE_ENV,
  NODE_MODULES,
  NODE_MODULES_GLOB_RECURSIVE,
  NPM,
  NPX,
  OVERRIDES,
  PACKAGE_DEFAULT_VERSION,
  PACKAGE_JSON,
  PACKAGE_LOCK_JSON,
  PNPM,
  PNPM_LOCK_YAML,
  PRE_COMMIT,
  README_GLOB,
  README_GLOB_RECURSIVE,
  REGISTRY_SCOPE_DELIMITER,
  README_MD,
  REGISTRY,
  RESOLUTIONS,
  SOCKET_GITHUB_ORG,
  SOCKET_IPC_HANDSHAKE,
  SOCKET_OVERRIDE_SCOPE,
  SOCKET_PUBLIC_API_TOKEN,
  SOCKET_REGISTRY_NPM_ORG,
  SOCKET_REGISTRY_PACKAGE_NAME,
  SOCKET_REGISTRY_REPO_NAME,
  SOCKET_REGISTRY_SCOPE,
  SOCKET_SECURITY_SCOPE,
  TSCONFIG_JSON,
  UNKNOWN_ERROR,
  UNKNOWN_VALUE,
  UNLICENCED,
  UNLICENSED,
  UTF8,
  VITEST,
  VLT,
  YARN,
  YARN_BERRY,
  YARN_CLASSIC,
  YARN_LOCK,
  kInternalsSymbol,
  [kInternalsSymbol]: {
    attributes: registryConstantsAttribs,
    createConstantsObject,
    getIpc
  }
} = registryConstants;
// Socket CLI specific constants that are not in socket-registry.
const ALERT_TYPE_CRITICAL_CVE = 'criticalCVE';
const ALERT_TYPE_CVE = 'cve';
const ALERT_TYPE_MEDIUM_CVE = 'mediumCVE';
const ALERT_TYPE_MILD_CVE = 'mildCVE';
const API_V0_URL = 'https://api.socket.dev/v0/';
const CONFIG_KEY_API_BASE_URL = 'apiBaseUrl';
const CONFIG_KEY_API_PROXY = 'apiProxy';
const CONFIG_KEY_API_TOKEN = 'apiToken';
const CONFIG_KEY_DEFAULT_ORG = 'defaultOrg';
const CONFIG_KEY_ENFORCED_ORGS = 'enforcedOrgs';
const CONFIG_KEY_ORG = 'org';
const DOT_SOCKET_DOT_FACTS_JSON = `${DOT_SOCKET_DIR}.facts.json`;
const DLX_BINARY_CACHE_TTL = 7 * 24 * 60 * 60 * 1_000; // 7 days in milliseconds.
const DRY_RUN_LABEL = '[DryRun]';
const DRY_RUN_BAILING_NOW = `${DRY_RUN_LABEL}: Bailing now`;
const DRY_RUN_NOT_SAVING = `${DRY_RUN_LABEL}: Not saving`;
const ENVIRONMENT_YAML = 'environment.yaml';
const ENVIRONMENT_YML = 'environment.yml';
const ERROR_NO_MANIFEST_FILES = 'No manifest files found';
const ERROR_NO_PACKAGE_JSON = 'No package.json found';
const ERROR_NO_REPO_FOUND = 'No repo found';
const ERROR_NO_SOCKET_DIR = 'No .socket directory found';
const ERROR_UNABLE_RESOLVE_ORG = 'Unable to resolve a Socket account organization';
const FLAG_CONFIG = '--config';
const FLAG_DRY_RUN = '--dry-run';
const FLAG_HELP = '--help';
const FLAG_HELP_FULL = '--help-full';
const FLAG_ID = '--id';
const FLAG_JSON = '--json';
const FLAG_LOGLEVEL = '--loglevel';
const FLAG_MARKDOWN = '--markdown';
const FLAG_ORG = '--org';
const FLAG_PIN = '--pin';
const FLAG_PROD = '--prod';
const FLAG_QUIET = '--quiet';
const FLAG_SILENT = '--silent';
const FLAG_TEXT = '--text';
const FLAG_VERBOSE = '--verbose';
const FLAG_VERSION = '--version';
const FOLD_SETTING_FILE = 'file';
const FOLD_SETTING_NONE = 'none';
const FOLD_SETTING_PKG = 'pkg';
const FOLD_SETTING_VERSION = 'version';
const GQL_PAGE_SENTINEL = 100;
const GQL_PR_STATE_CLOSED = 'CLOSED';
const GQL_PR_STATE_MERGED = 'MERGED';
const GQL_PR_STATE_OPEN = 'OPEN';
const HTTP_STATUS_BAD_REQUEST = 400;
const HTTP_STATUS_FORBIDDEN = 403;
const HTTP_STATUS_INTERNAL_SERVER_ERROR = 500;
const HTTP_STATUS_NOT_FOUND = 404;
const HTTP_STATUS_UNAUTHORIZED = 401;
const NPM_BUGGY_OVERRIDES_PATCHED_VERSION = '11.2.0';
const NPM_REGISTRY_URL = 'https://registry.npmjs.org';
const OUTPUT_JSON = 'json';
const OUTPUT_MARKDOWN = 'markdown';
const OUTPUT_TEXT = 'text';
const PNPM_WORKSPACE_YAML = 'pnpm-workspace.yaml';
const REDACTED = '<redacted>';
const REPORT_LEVEL_DEFER = 'defer';
const REPORT_LEVEL_ERROR = 'error';
const REPORT_LEVEL_IGNORE = 'ignore';
const REPORT_LEVEL_MONITOR = 'monitor';
const REPORT_LEVEL_WARN = 'warn';
const REQUIREMENTS_TXT = 'requirements.txt';
const SOCKET_CLI_ACCEPT_RISKS = 'SOCKET_CLI_ACCEPT_RISKS';
const SOCKET_CLI_BIN_NAME = 'socket';
const SOCKET_CLI_ISSUES_URL = 'https://github.com/SocketDev/socket-cli/issues';
const SOCKET_CLI_SHADOW_ACCEPT_RISKS = 'SOCKET_CLI_SHADOW_ACCEPT_RISKS';
const SOCKET_CLI_SHADOW_API_TOKEN = 'SOCKET_CLI_SHADOW_API_TOKEN';
const SOCKET_CLI_SHADOW_BIN = 'SOCKET_CLI_SHADOW_BIN';
const SOCKET_CLI_SHADOW_PROGRESS = 'SOCKET_CLI_SHADOW_PROGRESS';
const SOCKET_CLI_SHADOW_SILENT = 'SOCKET_CLI_SHADOW_SILENT';
const SOCKET_CLI_VIEW_ALL_RISKS = 'SOCKET_CLI_VIEW_ALL_RISKS';
const SOCKET_DEFAULT_BRANCH = 'socket-default-branch';
const SOCKET_DEFAULT_REPOSITORY = 'socket-default-repository';
const SOCKET_JSON = 'socket.json';
const SOCKET_WEBSITE_URL = 'https://socket.dev';
const SOCKET_YAML = 'socket.yaml';
const SOCKET_YML = 'socket.yml';
const V1_MIGRATION_GUIDE_URL = 'https://docs.socket.dev/docs/v1-migration-guide';
let _Sentry;
let _npmStdioPipeOptions;
function getNpmStdioPipeOptions() {
  if (_npmStdioPipeOptions === undefined) {
    _npmStdioPipeOptions = {
      cwd: process.cwd(),
      // On Windows, npm is often a .cmd file that requires shell execution.
      // The spawn function from @socketsecurity/registry will handle this properly
      // when shell is true.
      shell: constants.WIN32
    };
  }
  return _npmStdioPipeOptions;
}
const LAZY_ENV = () => {
  const {
    env
  } = process;
  const envHelpers = /*@__PURE__*/require$1('../external/@socketsecurity/registry/lib/env');
  const utils = /*@__PURE__*/require$1(path.join(constants.rootPath, 'dist/utils.js'));
  const envAsBoolean = envHelpers.envAsBoolean;
  const envAsNumber = envHelpers.envAsNumber;
  const envAsString = envHelpers.envAsString;
  const getConfigValueOrUndef = utils.getConfigValueOrUndef;
  const readOrDefaultSocketJson = utils.readOrDefaultSocketJson;
  const GITHUB_TOKEN = envAsString(env['GITHUB_TOKEN']);
  const INLINED_SOCKET_CLI_PUBLISHED_BUILD = envAsBoolean(true);
  // We inline some environment values so that they CANNOT be influenced by user
  // provided environment variables.
  return Object.freeze({
    __proto__: null,
    // Lazily access registryConstants.ENV.
    ...registryConstants.ENV,
    // Disable using GitHub's workflow actions/cache.
    // https://github.com/actions/cache
    DISABLE_GITHUB_CACHE: envAsBoolean(env['DISABLE_GITHUB_CACHE']),
    // The API URL. For example, https://api.github.com.
    // https://docs.github.com/en/codespaces/developing-in-a-codespace/default-environment-variables-for-your-codespace#list-of-default-environment-variables
    GITHUB_API_URL: envAsString(env['GITHUB_API_URL']) || 'https://api.github.com',
    // The name of the base ref or target branch of the pull request in a workflow
    // run. This is only set when the event that triggers a workflow run is either
    // pull_request or pull_request_target. For example, main.
    // https://docs.github.com/en/codespaces/developing-in-a-codespace/default-environment-variables-for-your-codespace#list-of-default-environment-variables
    GITHUB_BASE_REF: envAsString(env['GITHUB_BASE_REF']),
    // The short ref name of the branch or tag that triggered the GitHub workflow
    // run. This value matches the branch or tag name shown on GitHub. For example,
    // feature-branch-1. For pull requests, the format is <pr_number>/merge.
    // https://docs.github.com/en/codespaces/developing-in-a-codespace/default-environment-variables-for-your-codespace#list-of-default-environment-variables
    GITHUB_REF_NAME: envAsString(env['GITHUB_REF_NAME']),
    // The type of ref that triggered the workflow run. Valid values are branch or tag.
    // https://docs.github.com/en/codespaces/developing-in-a-codespace/default-environment-variables-for-your-codespace#list-of-default-environment-variables
    GITHUB_REF_TYPE: envAsString(env['GITHUB_REF_TYPE']),
    // The owner and repository name. For example, octocat/Hello-World.
    // https://docs.github.com/en/codespaces/developing-in-a-codespace/default-environment-variables-for-your-codespace#list-of-default-environment-variables
    GITHUB_REPOSITORY: envAsString(env['GITHUB_REPOSITORY']),
    // The URL of the GitHub server. For example, https://github.com.
    // https://docs.github.com/en/codespaces/developing-in-a-codespace/default-environment-variables-for-your-codespace#list-of-default-environment-variables
    GITHUB_SERVER_URL: envAsString(env['GITHUB_SERVER_URL']) || 'https://github.com',
    // The GITHUB_TOKEN secret is a GitHub App installation access token.
    // The token's permissions are limited to the repository that contains the
    // workflow.
    // https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#about-the-github_token-secret
    GITHUB_TOKEN,
    // Comp-time inlined @coana-tech/cli package version.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_COANA_TECH_CLI_VERSION']".
    INLINED_SOCKET_CLI_COANA_TECH_CLI_VERSION: envAsString("14.12.28"),
    // Comp-time inlined @cyclonedx/cdxgen package version.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_CYCLONEDX_CDXGEN_VERSION']".
    INLINED_SOCKET_CLI_CYCLONEDX_CDXGEN_VERSION: envAsString("11.7.0"),
    // Comp-time inlined Socket package homepage.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_HOMEPAGE']".
    INLINED_SOCKET_CLI_HOMEPAGE: envAsString("https://github.com/SocketDev/socket-cli"),
    // Comp-time inlined flag to determine if this is the Legacy build.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_LEGACY_BUILD']".
    INLINED_SOCKET_CLI_LEGACY_BUILD: envAsBoolean(false),
    // Comp-time inlined Socket package name.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_NAME']".
    INLINED_SOCKET_CLI_NAME: envAsString("socket"),
    // Comp-time inlined flag to determine if this is a published build.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_PUBLISHED_BUILD']".
    INLINED_SOCKET_CLI_PUBLISHED_BUILD,
    // Comp-time inlined flag to determine if this is the Sentry build.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_SENTRY_BUILD']".
    INLINED_SOCKET_CLI_SENTRY_BUILD: envAsBoolean(false),
    // Comp-time inlined synp package version.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_SYNP_VERSION']".
    INLINED_SOCKET_CLI_SYNP_VERSION: envAsString("1.9.14"),
    // Comp-time inlined Socket package version.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_VERSION']".
    INLINED_SOCKET_CLI_VERSION: envAsString("1.1.23"),
    // Comp-time inlined Socket package version hash.
    // The '@rollup/plugin-replace' will replace "process.env['INLINED_SOCKET_CLI_VERSION_HASH']".
    INLINED_SOCKET_CLI_VERSION_HASH: envAsString("1.1.23:bced0d7:da5df59b"),
    // Enable the module compile cache for the Node.js instance.
    // https://nodejs.org/api/cli.html#node_compile_cachedir
    NODE_COMPILE_CACHE: constants.SUPPORTS_NODE_COMPILE_CACHE_ENV_VAR ? constants.socketCachePath : '',
    // Redefine registryConstants.ENV.NODE_ENV to account for the
    // INLINED_SOCKET_CLI_PUBLISHED_BUILD environment variable.
    NODE_ENV: envAsString(env['NODE_ENV']).toLowerCase() === 'production' ? 'production' : INLINED_SOCKET_CLI_PUBLISHED_BUILD ? '' : 'development',
    // Well known "root" CAs (like VeriSign) will be extended with the extra
    // certificates in file. The file should consist of one or more trusted
    // certificates in PEM format.
    // https://nodejs.org/api/cli.html#node_extra_ca_certsfile
    NODE_EXTRA_CA_CERTS: envAsString(env['NODE_EXTRA_CA_CERTS']) ||
    // Commonly used environment variable to specify the path to a single
    // PEM-encoded certificate file.
    envAsString(env['SSL_CERT_FILE']),
    // npm cache directory path. Used to detect if running from npm's npx cache
    // for temporary execution contexts.
    npm_config_cache: envAsString(env['npm_config_cache']),
    // Package manager user agent string that identifies which package manager
    // is executing commands. Used to detect temporary execution contexts like
    // npx, pnpm dlx, or yarn dlx.
    // Expected values:
    // - npm: 'npm/version node/version os arch' (e.g., 'npm/10.0.0 node/v20.0.0 darwin x64')
    // - npx: Similar to npm but may include 'npx' or 'exec' in the string
    // - yarn: 'yarn/version npm/? node/version os arch' (e.g., 'yarn/1.22.0 npm/? node/v20.0.0 darwin x64')
    // - pnpm: 'pnpm/version node/version os arch' (Note: Not set for pnpm dlx/create/init)
    // - When running via exec/npx/dlx, the string may contain 'exec', 'npx', or 'dlx'
    npm_config_user_agent: envAsString(env['npm_config_user_agent']),
    // PATH is an environment variable that lists directories where executable
    // programs are located. When a command is run, the system searches these
    // directories to find the executable.
    PATH: envAsString(env['PATH']),
    // Accept risks of a Socket wrapped npm/npx run.
    SOCKET_CLI_ACCEPT_RISKS: envAsBoolean(env[SOCKET_CLI_ACCEPT_RISKS]),
    // Change the base URL for Socket API calls.
    // https://github.com/SocketDev/socket-cli?tab=readme-ov-file#environment-variables-for-development
    SOCKET_CLI_API_BASE_URL: envAsString(env['SOCKET_CLI_API_BASE_URL']) ||
    // TODO: Remove legacy environment variable name.
    envAsString(env['SOCKET_SECURITY_API_BASE_URL']) || getConfigValueOrUndef('apiBaseUrl') || API_V0_URL,
    // Set the proxy that all requests are routed through.
    // https://github.com/SocketDev/socket-cli?tab=readme-ov-file#environment-variables-for-development
    SOCKET_CLI_API_PROXY: envAsString(env['SOCKET_CLI_API_PROXY']) ||
    // TODO: Remove legacy environment variable name.
    envAsString(env['SOCKET_SECURITY_API_PROXY']) ||
    // Commonly used environment variables to specify routing requests through
    // a proxy server.
    envAsString(env['HTTPS_PROXY']) || envAsString(env['https_proxy']) || envAsString(env['HTTP_PROXY']) || envAsString(env['http_proxy']),
    // Set the timeout in milliseconds for Socket API requests.
    // https://nodejs.org/api/http.html#httprequesturl-options-callback
    SOCKET_CLI_API_TIMEOUT: envAsNumber(env['SOCKET_CLI_API_TIMEOUT']),
    // Set the Socket API token.
    // https://github.com/SocketDev/socket-cli?tab=readme-ov-file#environment-variables
    SOCKET_CLI_API_TOKEN: envAsString(env['SOCKET_CLI_API_TOKEN']) ||
    // TODO: Remove legacy environment variable names.
    envAsString(env['SOCKET_CLI_API_KEY']) || envAsString(env['SOCKET_SECURITY_API_TOKEN']) || envAsString(env['SOCKET_SECURITY_API_KEY']),
    // A JSON stringified Socket configuration object.
    SOCKET_CLI_CONFIG: envAsString(env['SOCKET_CLI_CONFIG']),
    // The git config user.email used by Socket CLI.
    SOCKET_CLI_GIT_USER_EMAIL: envAsString(env['SOCKET_CLI_GIT_USER_EMAIL']) || 'github-actions[bot]@users.noreply.github.com',
    // The git config user.name used by Socket CLI.
    SOCKET_CLI_GIT_USER_NAME: envAsString(env['SOCKET_CLI_GIT_USER_NAME']) || envAsString(env['SOCKET_CLI_GIT_USERNAME']) || 'github-actions[bot]',
    // Change the base URL for GitHub REST API calls.
    // https://docs.github.com/en/rest
    SOCKET_CLI_GITHUB_API_URL: envAsString(env['SOCKET_CLI_GITHUB_API_URL']) || readOrDefaultSocketJson(process.cwd())?.defaults?.scan?.github?.githubApiUrl || 'https://api.github.com',
    // A classic GitHub personal access token with the "repo" scope or a
    // fine-grained access token with at least read/write permissions set for
    // "Contents" and "Pull Request".
    // https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
    SOCKET_CLI_GITHUB_TOKEN: envAsString(env['SOCKET_CLI_GITHUB_TOKEN']) ||
    // TODO: Remove undocumented legacy environment variable name.
    envAsString(env['SOCKET_SECURITY_GITHUB_PAT']) || GITHUB_TOKEN,
    // Make the default API token `undefined`.
    SOCKET_CLI_NO_API_TOKEN: envAsBoolean(env['SOCKET_CLI_NO_API_TOKEN']),
    // The absolute location of the npm directory.
    SOCKET_CLI_NPM_PATH: envAsString(env['SOCKET_CLI_NPM_PATH']),
    // Specify the Socket organization slug.
    SOCKET_CLI_ORG_SLUG: envAsString(env['SOCKET_CLI_ORG_SLUG']) ||
    // Coana CLI accepts the SOCKET_ORG_SLUG environment variable.
    envAsString(env['SOCKET_ORG_SLUG']),
    // View all risks of a Socket wrapped npm/npx run.
    SOCKET_CLI_VIEW_ALL_RISKS: envAsBoolean(env[SOCKET_CLI_VIEW_ALL_RISKS]),
    // Specifies the type of terminal or terminal emulator being used by the process.
    TERM: envAsString(env['TERM']),
    // Redefine registryConstants.ENV.VITEST to account for the
    // INLINED_SOCKET_CLI_PUBLISHED_BUILD environment variable.
    VITEST: INLINED_SOCKET_CLI_PUBLISHED_BUILD ? false : envAsBoolean(false)
  });
};
const lazyBashRcPath = () => path.join(constants.homePath, '.bashrc');
const lazyBinPath = () => path.join(constants.rootPath, 'bin');
const lazyBinCliPath = () => path.join(constants.binPath, 'cli.js');
const lazyBlessedContribPath = () => path.join(constants.externalPath, 'blessed-contrib');
const lazyBlessedOptions = () => Object.freeze({
  smartCSR: true,
  term: constants.WIN32 ? 'windows-ansi' : 'xterm',
  useBCE: true
});
const lazyBlessedPath = () => path.join(constants.externalPath, 'blessed');
const lazyDistCliPath = () => path.join(constants.distPath, 'cli.js');
const lazyDistPath = () => path.join(constants.rootPath, 'dist');
const lazyExternalPath = () => path.join(constants.rootPath, 'external');
const lazyGithubCachePath = () => path.join(constants.socketCachePath, 'github');
const lazyHomePath = () => os.homedir();
const lazyInstrumentWithSentryPath = () => path.join(constants.distPath, 'instrument-with-sentry.js');
const lazyMinimumVersionByAgent = () => new Map([
// Bun >=1.1.39 supports the text-based lockfile.
// https://bun.sh/blog/bun-lock-text-lockfile
[BUN, '1.1.39'],
// The npm version bundled with Node 18.
// https://nodejs.org/en/about/previous-releases#looking-for-the-latest-release-of-a-version-branch
[NPM, '10.8.2'],
// 8.x is the earliest version to support Node 18.
// https://pnpm.io/installation#compatibility
// https://www.npmjs.com/package/pnpm?activeTab=versions
[PNPM, '8.15.7'],
// 4.x supports >= Node 18.12.0
// https://github.com/yarnpkg/berry/blob/%40yarnpkg/core/4.1.0/CHANGELOG.md#400
[YARN_BERRY, '4.0.0'],
// Latest 1.x.
// https://www.npmjs.com/package/yarn?activeTab=versions
[YARN_CLASSIC, '1.22.22'],
// vlt does not support overrides so we don't gate on it.
[VLT, '*']]);
const lazyNmBinPath = () => path.join(constants.rootPath, 'node_modules/.bin');
const lazyNodeDebugFlags = () => constants.ENV.SOCKET_CLI_DEBUG ? ['--trace-uncaught', '--trace-warnings'] : [];

// Redefine registryConstants.nodeHardenFlags to account for the
// INLINED_SOCKET_CLI_SENTRY_BUILD environment variable.
const lazyNodeHardenFlags = () => Object.freeze(
// Harden Node security.
// https://nodejs.org/en/learn/getting-started/security-best-practices
constants.ENV.INLINED_SOCKET_CLI_SENTRY_BUILD || constants.WIN32 ? [
  // https://nodejs.org/api/cli.html#--disallow-code-generation-from-strings
  // '--disallow-code-generation-from-strings'
] : [
  // '--disallow-code-generation-from-strings',
  // https://nodejs.org/api/cli.html#--disable-protomode
  // '--disable-proto',
  // 'throw',
  // https://nodejs.org/api/cli.html#--frozen-intrinsics
  // We have contributed the following patches to our dependencies to make
  // Node's --frozen-intrinsics workable.
  // √ https://github.com/SBoudrias/Inquirer.js/pull/1683
  // √ https://github.com/pnpm/components/pull/23
  // '--frozen-intrinsics',
  // https://nodejs.org/api/cli.html#--no-deprecation
  // '--no-deprecation',
]);
const lazyNodeMemoryFlags = () => {
  const flags = /*@__PURE__*/require$1(path.join(constants.rootPath, 'dist/flags.js'));
  const getMaxOldSpaceSizeFlag = flags.getMaxOldSpaceSizeFlag;
  const getMaxSemiSpaceSizeFlag = flags.getMaxSemiSpaceSizeFlag;
  return Object.freeze([`--max-old-space-size=${getMaxOldSpaceSizeFlag()}`, `--max-semi-space-size=${getMaxSemiSpaceSizeFlag()}`]);
};
const lazyNpmCachePath = () => {
  const spawnHelpers = /*@__PURE__*/require$1('../external/@socketsecurity/registry/lib/spawn');
  const spawnSync = spawnHelpers.spawnSync;
  return spawnSync(constants.npmExecPath, ['config', 'get', 'cache'], getNpmStdioPipeOptions()).stdout;
};
const lazyNpmGlobalPrefix = () => {
  const spawnHelpers = /*@__PURE__*/require$1('../external/@socketsecurity/registry/lib/spawn');
  const spawnSync = spawnHelpers.spawnSync;
  return spawnSync(constants.npmExecPath, ['prefix', '-g'], getNpmStdioPipeOptions()).stdout;
};
const lazyNpmNmNodeGypPath = () => path.join(constants.npmRealExecPath, '../../node_modules/node-gyp/bin/node-gyp.js');
const lazyProcessEnv = () => Object.setPrototypeOf(Object.fromEntries(Object.entries(constants.ENV).reduce((entries, entry) => {
  const {
    0: key,
    1: value
  } = entry;
  if (key.startsWith('INLINED_SOCKET_CLI_')) {
    return entries;
  }
  if (typeof value === 'string') {
    if (value) {
      entries.push(entry);
    }
  } else if (typeof value === 'boolean' && value) {
    entries.push([key, '1']);
  }
  return entries;
}, [])), null);
const lazyRootPath = () => path.join(fs.realpathSync.native(__dirname$1), '..');
const lazyShadowBinPath = () => path.join(constants.rootPath, 'shadow-npm-bin');
const lazyShadowNpmBinPath = () => path.join(constants.distPath, 'shadow-npm-bin.js');
const lazyShadowNpmInjectPath = () => path.join(constants.distPath, 'shadow-npm-inject.js');
const lazyShadowNpxBinPath = () => path.join(constants.distPath, 'shadow-npx-bin.js');
const lazyShadowPnpmBinPath = () => path.join(constants.distPath, 'shadow-pnpm-bin.js');
const lazyShadowYarnBinPath = () => path.join(constants.distPath, 'shadow-yarn-bin.js');
const lazySocketAppDataPath = () => {
  // Get the OS app data directory:
  // - Win: %LOCALAPPDATA% or fail?
  // - Mac: %XDG_DATA_HOME% or fallback to "~/Library/Application Support/"
  // - Linux: %XDG_DATA_HOME% or fallback to "~/.local/share/"
  // Note: LOCALAPPDATA is typically: C:\Users\USERNAME\AppData
  // Note: XDG stands for "X Desktop Group", nowadays "freedesktop.org"
  //       On most systems that path is: $HOME/.local/share
  // Then append `socket/settings`, so:
  // - Win: %LOCALAPPDATA%\socket\settings or return undefined
  // - Mac: %XDG_DATA_HOME%/socket/settings or "~/Library/Application Support/socket/settings"
  // - Linux: %XDG_DATA_HOME%/socket/settings or "~/.local/share/socket/settings"
  const {
    WIN32
  } = constants;
  let dataHome = WIN32 ? constants.ENV.LOCALAPPDATA : constants.ENV.XDG_DATA_HOME;
  if (!dataHome) {
    if (WIN32) {
      const logger = /*@__PURE__*/require$1('../external/@socketsecurity/registry/lib/logger');
      logger.warn(`Missing %LOCALAPPDATA%.`);
    } else {
      dataHome = path.join(constants.homePath, constants.DARWIN ? 'Library/Application Support' : '.local/share');
    }
  }
  return dataHome ? path.join(dataHome, 'socket/settings') : undefined;
};
const lazySocketCachePath = () => path.join(constants.rootPath, '.cache');
const lazySocketRegistryPath = () => path.join(constants.externalPath, '@socketsecurity/registry');
const lazyZshRcPath = () => path.join(constants.homePath, '.zshrc');
const constants = createConstantsObject({
  ...registryConstantsAttribs.props,
  ALERT_TYPE_CRITICAL_CVE,
  ALERT_TYPE_CVE,
  ALERT_TYPE_MEDIUM_CVE,
  ALERT_TYPE_MILD_CVE,
  API_V0_URL,
  BUN,
  CONFIG_KEY_API_BASE_URL,
  CONFIG_KEY_API_PROXY,
  CONFIG_KEY_API_TOKEN,
  CONFIG_KEY_DEFAULT_ORG,
  CONFIG_KEY_ENFORCED_ORGS,
  CONFIG_KEY_ORG,
  DOT_GIT_DIR,
  DOT_SOCKET_DIR,
  DOT_SOCKET_DOT_FACTS_JSON,
  DRY_RUN_BAILING_NOW,
  DRY_RUN_LABEL,
  DRY_RUN_NOT_SAVING,
  ENV: undefined,
  ENVIRONMENT_YAML,
  ENVIRONMENT_YML,
  ERROR_NO_MANIFEST_FILES,
  ERROR_NO_PACKAGE_JSON,
  ERROR_NO_REPO_FOUND,
  ERROR_NO_SOCKET_DIR,
  ERROR_UNABLE_RESOLVE_ORG,
  EXT_YAML,
  EXT_YML,
  FLAG_CONFIG,
  FLAG_DRY_RUN,
  FLAG_HELP,
  FLAG_HELP_FULL,
  FLAG_ID,
  FLAG_JSON,
  FLAG_LOGLEVEL,
  FLAG_MARKDOWN,
  FLAG_ORG,
  FLAG_PIN,
  FLAG_PROD,
  FLAG_QUIET,
  FLAG_SILENT,
  FLAG_TEXT,
  FLAG_VERBOSE,
  FLAG_VERSION,
  FOLD_SETTING_FILE,
  FOLD_SETTING_NONE,
  FOLD_SETTING_PKG,
  FOLD_SETTING_VERSION,
  GQL_PAGE_SENTINEL,
  GQL_PR_STATE_CLOSED,
  GQL_PR_STATE_MERGED,
  GQL_PR_STATE_OPEN,
  HTTP_STATUS_BAD_REQUEST,
  HTTP_STATUS_FORBIDDEN,
  HTTP_STATUS_INTERNAL_SERVER_ERROR,
  HTTP_STATUS_NOT_FOUND,
  HTTP_STATUS_UNAUTHORIZED,
  NODE_MODULES,
  NPM_BUGGY_OVERRIDES_PATCHED_VERSION,
  NPM_REGISTRY_URL,
  NPX,
  OUTPUT_JSON,
  OUTPUT_MARKDOWN,
  OUTPUT_TEXT,
  PACKAGE_JSON,
  PACKAGE_LOCK_JSON,
  PNPM,
  PNPM_LOCK_YAML,
  PNPM_WORKSPACE_YAML,
  REDACTED,
  REPORT_LEVEL_DEFER,
  REPORT_LEVEL_ERROR,
  REPORT_LEVEL_IGNORE,
  REPORT_LEVEL_MONITOR,
  REPORT_LEVEL_WARN,
  REQUIREMENTS_TXT,
  SOCKET_CLI_ACCEPT_RISKS,
  SOCKET_CLI_BIN_NAME,
  SOCKET_CLI_ISSUES_URL,
  SOCKET_CLI_SHADOW_ACCEPT_RISKS,
  SOCKET_CLI_SHADOW_API_TOKEN,
  SOCKET_CLI_SHADOW_BIN,
  SOCKET_CLI_SHADOW_PROGRESS,
  SOCKET_CLI_SHADOW_SILENT,
  SOCKET_CLI_VIEW_ALL_RISKS,
  SOCKET_DEFAULT_BRANCH,
  SOCKET_DEFAULT_REPOSITORY,
  SOCKET_JSON,
  SOCKET_WEBSITE_URL,
  SOCKET_YAML,
  SOCKET_YML,
  TSCONFIG_JSON,
  UNKNOWN_ERROR,
  UNKNOWN_VALUE,
  V1_MIGRATION_GUIDE_URL,
  VLT,
  YARN,
  YARN_BERRY,
  YARN_CLASSIC,
  bashRcPath: undefined,
  binPath: undefined,
  binCliPath: undefined,
  blessedContribPath: undefined,
  blessedOptions: undefined,
  blessedPath: undefined,
  distCliPath: undefined,
  distPath: undefined,
  externalPath: undefined,
  githubCachePath: undefined,
  homePath: undefined,
  instrumentWithSentryPath: undefined,
  minimumVersionByAgent: undefined,
  nmBinPath: undefined,
  nodeHardenFlags: undefined,
  nodeDebugFlags: undefined,
  nodeMemoryFlags: undefined,
  npmCachePath: undefined,
  npmGlobalPrefix: undefined,
  npmNmNodeGypPath: undefined,
  processEnv: undefined,
  rootPath: undefined,
  shadowBinPath: undefined,
  shadowNpmInjectPath: undefined,
  shadowNpmBinPath: undefined,
  shadowPnpmBinPath: undefined,
  shadowYarnBinPath: undefined,
  socketAppDataPath: undefined,
  socketCachePath: undefined,
  socketRegistryPath: undefined,
  zshRcPath: undefined
}, {
  getters: {
    ...registryConstantsAttribs.getters,
    ENV: LAZY_ENV,
    bashRcPath: lazyBashRcPath,
    binCliPath: lazyBinCliPath,
    binPath: lazyBinPath,
    blessedContribPath: lazyBlessedContribPath,
    blessedOptions: lazyBlessedOptions,
    blessedPath: lazyBlessedPath,
    distCliPath: lazyDistCliPath,
    distPath: lazyDistPath,
    externalPath: lazyExternalPath,
    githubCachePath: lazyGithubCachePath,
    homePath: lazyHomePath,
    instrumentWithSentryPath: lazyInstrumentWithSentryPath,
    minimumVersionByAgent: lazyMinimumVersionByAgent,
    nmBinPath: lazyNmBinPath,
    nodeDebugFlags: lazyNodeDebugFlags,
    nodeHardenFlags: lazyNodeHardenFlags,
    nodeMemoryFlags: lazyNodeMemoryFlags,
    npmCachePath: lazyNpmCachePath,
    npmGlobalPrefix: lazyNpmGlobalPrefix,
    npmNmNodeGypPath: lazyNpmNmNodeGypPath,
    processEnv: lazyProcessEnv,
    rootPath: lazyRootPath,
    shadowBinPath: lazyShadowBinPath,
    shadowNpmBinPath: lazyShadowNpmBinPath,
    shadowNpmInjectPath: lazyShadowNpmInjectPath,
    shadowNpxBinPath: lazyShadowNpxBinPath,
    shadowPnpmBinPath: lazyShadowPnpmBinPath,
    shadowYarnBinPath: lazyShadowYarnBinPath,
    socketAppDataPath: lazySocketAppDataPath,
    socketCachePath: lazySocketCachePath,
    socketRegistryPath: lazySocketRegistryPath,
    zshRcPath: lazyZshRcPath
  },
  internals: {
    ...registryConstantsAttribs.internals,
    getIpc,
    getSentry() {
      return _Sentry;
    },
    setSentry(Sentry) {
      if (_Sentry === undefined) {
        _Sentry = Sentry;
        return true;
      }
      return false;
    }
  }
});

exports.ALERT_TYPE_CRITICAL_CVE = ALERT_TYPE_CRITICAL_CVE;
exports.ALERT_TYPE_CVE = ALERT_TYPE_CVE;
exports.ALERT_TYPE_MEDIUM_CVE = ALERT_TYPE_MEDIUM_CVE;
exports.ALERT_TYPE_MILD_CVE = ALERT_TYPE_MILD_CVE;
exports.API_V0_URL = API_V0_URL;
exports.AT_LATEST = AT_LATEST;
exports.BIOME_JSON = BIOME_JSON;
exports.BUN = BUN;
exports.CI = CI;
exports.COLUMN_LIMIT = COLUMN_LIMIT;
exports.CONFIG_KEY_API_BASE_URL = CONFIG_KEY_API_BASE_URL;
exports.CONFIG_KEY_API_PROXY = CONFIG_KEY_API_PROXY;
exports.CONFIG_KEY_API_TOKEN = CONFIG_KEY_API_TOKEN;
exports.CONFIG_KEY_DEFAULT_ORG = CONFIG_KEY_DEFAULT_ORG;
exports.CONFIG_KEY_ENFORCED_ORGS = CONFIG_KEY_ENFORCED_ORGS;
exports.CONFIG_KEY_ORG = CONFIG_KEY_ORG;
exports.DLX_BINARY_CACHE_TTL = DLX_BINARY_CACHE_TTL;
exports.DOT_GIT_DIR = DOT_GIT_DIR;
exports.DOT_PACKAGE_LOCK_JSON = DOT_PACKAGE_LOCK_JSON;
exports.DOT_SOCKET_DIR = DOT_SOCKET_DIR;
exports.DOT_SOCKET_DOT_FACTS_JSON = DOT_SOCKET_DOT_FACTS_JSON;
exports.DRY_RUN_BAILING_NOW = DRY_RUN_BAILING_NOW;
exports.DRY_RUN_LABEL = DRY_RUN_LABEL;
exports.DRY_RUN_NOT_SAVING = DRY_RUN_NOT_SAVING;
exports.EMPTY_FILE = EMPTY_FILE;
exports.EMPTY_VALUE = EMPTY_VALUE;
exports.ENVIRONMENT_YAML = ENVIRONMENT_YAML;
exports.ENVIRONMENT_YML = ENVIRONMENT_YML;
exports.ERROR_NO_MANIFEST_FILES = ERROR_NO_MANIFEST_FILES;
exports.ERROR_NO_PACKAGE_JSON = ERROR_NO_PACKAGE_JSON;
exports.ERROR_NO_REPO_FOUND = ERROR_NO_REPO_FOUND;
exports.ERROR_NO_SOCKET_DIR = ERROR_NO_SOCKET_DIR;
exports.ERROR_UNABLE_RESOLVE_ORG = ERROR_UNABLE_RESOLVE_ORG;
exports.ESLINT_CONFIG_JS = ESLINT_CONFIG_JS;
exports.ESNEXT = ESNEXT;
exports.EXTENSIONS = EXTENSIONS;
exports.EXTENSIONS_JSON = EXTENSIONS_JSON;
exports.EXT_CJS = EXT_CJS;
exports.EXT_CMD = EXT_CMD;
exports.EXT_CTS = EXT_CTS;
exports.EXT_DTS = EXT_DTS;
exports.EXT_JS = EXT_JS;
exports.EXT_JSON = EXT_JSON;
exports.EXT_LOCK = EXT_LOCK;
exports.EXT_LOCKB = EXT_LOCKB;
exports.EXT_MD = EXT_MD;
exports.EXT_MJS = EXT_MJS;
exports.EXT_MTS = EXT_MTS;
exports.EXT_PS1 = EXT_PS1;
exports.EXT_YAML = EXT_YAML;
exports.EXT_YML = EXT_YML;
exports.FLAG_CONFIG = FLAG_CONFIG;
exports.FLAG_DRY_RUN = FLAG_DRY_RUN;
exports.FLAG_HELP = FLAG_HELP;
exports.FLAG_HELP_FULL = FLAG_HELP_FULL;
exports.FLAG_ID = FLAG_ID;
exports.FLAG_JSON = FLAG_JSON;
exports.FLAG_LOGLEVEL = FLAG_LOGLEVEL;
exports.FLAG_MARKDOWN = FLAG_MARKDOWN;
exports.FLAG_ORG = FLAG_ORG;
exports.FLAG_PIN = FLAG_PIN;
exports.FLAG_PROD = FLAG_PROD;
exports.FLAG_QUIET = FLAG_QUIET;
exports.FLAG_SILENT = FLAG_SILENT;
exports.FLAG_TEXT = FLAG_TEXT;
exports.FLAG_VERBOSE = FLAG_VERBOSE;
exports.FLAG_VERSION = FLAG_VERSION;
exports.FOLD_SETTING_FILE = FOLD_SETTING_FILE;
exports.FOLD_SETTING_NONE = FOLD_SETTING_NONE;
exports.FOLD_SETTING_PKG = FOLD_SETTING_PKG;
exports.FOLD_SETTING_VERSION = FOLD_SETTING_VERSION;
exports.GITIGNORE = GITIGNORE;
exports.GQL_PAGE_SENTINEL = GQL_PAGE_SENTINEL;
exports.GQL_PR_STATE_CLOSED = GQL_PR_STATE_CLOSED;
exports.GQL_PR_STATE_MERGED = GQL_PR_STATE_MERGED;
exports.GQL_PR_STATE_OPEN = GQL_PR_STATE_OPEN;
exports.HTTP_STATUS_BAD_REQUEST = HTTP_STATUS_BAD_REQUEST;
exports.HTTP_STATUS_FORBIDDEN = HTTP_STATUS_FORBIDDEN;
exports.HTTP_STATUS_INTERNAL_SERVER_ERROR = HTTP_STATUS_INTERNAL_SERVER_ERROR;
exports.HTTP_STATUS_NOT_FOUND = HTTP_STATUS_NOT_FOUND;
exports.HTTP_STATUS_UNAUTHORIZED = HTTP_STATUS_UNAUTHORIZED;
exports.LATEST = LATEST;
exports.LICENSE = LICENSE;
exports.LICENSE_GLOB = LICENSE_GLOB;
exports.LICENSE_GLOB_RECURSIVE = LICENSE_GLOB_RECURSIVE;
exports.LICENSE_ORIGINAL = LICENSE_ORIGINAL;
exports.LICENSE_ORIGINAL_GLOB = LICENSE_ORIGINAL_GLOB;
exports.LICENSE_ORIGINAL_GLOB_RECURSIVE = LICENSE_ORIGINAL_GLOB_RECURSIVE;
exports.LOOP_SENTINEL = LOOP_SENTINEL;
exports.MANIFEST_JSON = MANIFEST_JSON;
exports.MIT = MIT;
exports.NODE_AUTH_TOKEN = NODE_AUTH_TOKEN;
exports.NODE_ENV = NODE_ENV;
exports.NODE_MODULES = NODE_MODULES;
exports.NODE_MODULES_GLOB_RECURSIVE = NODE_MODULES_GLOB_RECURSIVE;
exports.NPM = NPM;
exports.NPM_BUGGY_OVERRIDES_PATCHED_VERSION = NPM_BUGGY_OVERRIDES_PATCHED_VERSION;
exports.NPM_REGISTRY_URL = NPM_REGISTRY_URL;
exports.NPX = NPX;
exports.OUTPUT_JSON = OUTPUT_JSON;
exports.OUTPUT_MARKDOWN = OUTPUT_MARKDOWN;
exports.OUTPUT_TEXT = OUTPUT_TEXT;
exports.OVERRIDES = OVERRIDES;
exports.PACKAGE_DEFAULT_VERSION = PACKAGE_DEFAULT_VERSION;
exports.PACKAGE_JSON = PACKAGE_JSON;
exports.PACKAGE_LOCK_JSON = PACKAGE_LOCK_JSON;
exports.PNPM = PNPM;
exports.PNPM_LOCK_YAML = PNPM_LOCK_YAML;
exports.PNPM_WORKSPACE_YAML = PNPM_WORKSPACE_YAML;
exports.PRE_COMMIT = PRE_COMMIT;
exports.README_GLOB = README_GLOB;
exports.README_GLOB_RECURSIVE = README_GLOB_RECURSIVE;
exports.README_MD = README_MD;
exports.REDACTED = REDACTED;
exports.REGISTRY = REGISTRY;
exports.REGISTRY_SCOPE_DELIMITER = REGISTRY_SCOPE_DELIMITER;
exports.REPORT_LEVEL_DEFER = REPORT_LEVEL_DEFER;
exports.REPORT_LEVEL_ERROR = REPORT_LEVEL_ERROR;
exports.REPORT_LEVEL_IGNORE = REPORT_LEVEL_IGNORE;
exports.REPORT_LEVEL_MONITOR = REPORT_LEVEL_MONITOR;
exports.REPORT_LEVEL_WARN = REPORT_LEVEL_WARN;
exports.REQUIREMENTS_TXT = REQUIREMENTS_TXT;
exports.RESOLUTIONS = RESOLUTIONS;
exports.SOCKET_CLI_ACCEPT_RISKS = SOCKET_CLI_ACCEPT_RISKS;
exports.SOCKET_CLI_BIN_NAME = SOCKET_CLI_BIN_NAME;
exports.SOCKET_CLI_ISSUES_URL = SOCKET_CLI_ISSUES_URL;
exports.SOCKET_CLI_SHADOW_ACCEPT_RISKS = SOCKET_CLI_SHADOW_ACCEPT_RISKS;
exports.SOCKET_CLI_SHADOW_API_TOKEN = SOCKET_CLI_SHADOW_API_TOKEN;
exports.SOCKET_CLI_SHADOW_BIN = SOCKET_CLI_SHADOW_BIN;
exports.SOCKET_CLI_SHADOW_PROGRESS = SOCKET_CLI_SHADOW_PROGRESS;
exports.SOCKET_CLI_SHADOW_SILENT = SOCKET_CLI_SHADOW_SILENT;
exports.SOCKET_CLI_VIEW_ALL_RISKS = SOCKET_CLI_VIEW_ALL_RISKS;
exports.SOCKET_DEFAULT_BRANCH = SOCKET_DEFAULT_BRANCH;
exports.SOCKET_DEFAULT_REPOSITORY = SOCKET_DEFAULT_REPOSITORY;
exports.SOCKET_GITHUB_ORG = SOCKET_GITHUB_ORG;
exports.SOCKET_IPC_HANDSHAKE = SOCKET_IPC_HANDSHAKE;
exports.SOCKET_JSON = SOCKET_JSON;
exports.SOCKET_OVERRIDE_SCOPE = SOCKET_OVERRIDE_SCOPE;
exports.SOCKET_PUBLIC_API_TOKEN = SOCKET_PUBLIC_API_TOKEN;
exports.SOCKET_REGISTRY_NPM_ORG = SOCKET_REGISTRY_NPM_ORG;
exports.SOCKET_REGISTRY_PACKAGE_NAME = SOCKET_REGISTRY_PACKAGE_NAME;
exports.SOCKET_REGISTRY_REPO_NAME = SOCKET_REGISTRY_REPO_NAME;
exports.SOCKET_REGISTRY_SCOPE = SOCKET_REGISTRY_SCOPE;
exports.SOCKET_SECURITY_SCOPE = SOCKET_SECURITY_SCOPE;
exports.SOCKET_WEBSITE_URL = SOCKET_WEBSITE_URL;
exports.SOCKET_YAML = SOCKET_YAML;
exports.SOCKET_YML = SOCKET_YML;
exports.TSCONFIG_JSON = TSCONFIG_JSON;
exports.UNKNOWN_ERROR = UNKNOWN_ERROR;
exports.UNKNOWN_VALUE = UNKNOWN_VALUE;
exports.UNLICENCED = UNLICENCED;
exports.UNLICENSED = UNLICENSED;
exports.UTF8 = UTF8;
exports.V1_MIGRATION_GUIDE_URL = V1_MIGRATION_GUIDE_URL;
exports.VITEST = VITEST;
exports.VLT = VLT;
exports.YARN = YARN;
exports.YARN_BERRY = YARN_BERRY;
exports.YARN_CLASSIC = YARN_CLASSIC;
exports.YARN_LOCK = YARN_LOCK;
exports.default = constants;
//# debugId=765da3a3-ac1e-4fb9-87e8-d23eca7f75c5
//# sourceMappingURL=constants.js.map
