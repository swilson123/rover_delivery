{"version":3,"file":"shadow-yarn-bin.js","sources":["../src/shadow/yarn/bin.mts"],"sourcesContent":["import { fileURLToPath } from 'node:url'\n\nimport { debugFn } from '@socketsecurity/registry/lib/debug'\nimport { spawn } from '@socketsecurity/registry/lib/spawn'\n\nimport constants, { YARN } from '../../constants.mts'\nimport { cmdFlagsToString } from '../../utils/cmd.mts'\nimport { getPublicApiToken } from '../../utils/sdk.mts'\nimport { installYarnLinks } from '../../utils/shadow-links.mts'\nimport { scanPackagesAndLogAlerts } from '../common.mts'\nimport { ensureIpcInStdio } from '../stdio-ipc.mts'\n\nimport type { IpcObject } from '../../constants.mts'\nimport type {\n  SpawnExtra,\n  SpawnOptions,\n  SpawnResult,\n} from '@socketsecurity/registry/lib/spawn'\n\nexport type ShadowYarnOptions = SpawnOptions & {\n  ipc?: IpcObject | undefined\n}\n\nexport type ShadowYarnResult = {\n  spawnPromise: SpawnResult<string, SpawnExtra | undefined>\n}\n\nconst DLX_COMMANDS = new Set(['dlx'])\n\nconst INSTALL_COMMANDS = new Set([\n  'add',\n  'install',\n  'up',\n  'upgrade',\n  'upgrade-interactive',\n])\n\nexport default async function shadowYarnBin(\n  args: string[] | readonly string[] = process.argv.slice(2),\n  options?: ShadowYarnOptions | undefined,\n  extra?: SpawnExtra | undefined,\n): Promise<ShadowYarnResult> {\n  const opts = { __proto__: null, ...options } as ShadowYarnOptions\n  const { env: spawnEnv, ipc, ...spawnOpts } = opts\n\n  let { cwd = process.cwd() } = opts\n  if (cwd instanceof URL) {\n    cwd = fileURLToPath(cwd)\n  }\n\n  const terminatorPos = args.indexOf('--')\n  const rawYarnArgs = terminatorPos === -1 ? args : args.slice(0, terminatorPos)\n\n  const { spinner } = opts\n  const wasSpinning = !!spinner?.isSpinning\n\n  spinner?.start()\n\n  // Check for package scanning.\n  const command = rawYarnArgs[0]\n  const scanResult = await scanPackagesAndLogAlerts({\n    acceptRisks: !!constants.ENV.SOCKET_CLI_ACCEPT_RISKS,\n    command,\n    cwd,\n    dlxCommands: DLX_COMMANDS,\n    installCommands: INSTALL_COMMANDS,\n    managerName: YARN,\n    rawArgs: rawYarnArgs,\n    spinner,\n    viewAllRisks: !!constants.ENV.SOCKET_CLI_VIEW_ALL_RISKS,\n  })\n\n  if (scanResult.shouldExit) {\n    // eslint-disable-next-line n/no-process-exit\n    process.exit(1)\n    // This line is never reached in production, but helps tests.\n    throw new Error('process.exit called')\n  }\n\n  const realYarnPath = await installYarnLinks(constants.shadowBinPath)\n\n  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos)\n  const suffixArgs = [...rawYarnArgs, ...otherArgs]\n\n  debugFn(\n    'notice',\n    `spawn: ${YARN} shadow bin ${realYarnPath} ${cmdFlagsToString(suffixArgs)}`,\n  )\n\n  if (wasSpinning) {\n    spinner?.start()\n  }\n\n  // Set up stdio with IPC channel.\n  const stdio = ensureIpcInStdio(spawnOpts.stdio)\n\n  const spawnPromise = spawn(\n    realYarnPath,\n    suffixArgs,\n    {\n      ...spawnOpts,\n      cwd,\n      env: {\n        ...process.env,\n        ...spawnEnv,\n      },\n      stdio,\n      // On Windows, yarn is often a .cmd file that requires shell execution.\n      // The spawn function from @socketsecurity/registry will handle this properly\n      // when shell is true.\n      shell: constants.WIN32,\n    },\n    extra,\n  )\n\n  // Send IPC handshake.\n  spawnPromise.process.send({\n    [constants.SOCKET_IPC_HANDSHAKE]: {\n      [constants.SOCKET_CLI_SHADOW_API_TOKEN]: getPublicApiToken(),\n      [constants.SOCKET_CLI_SHADOW_BIN]: YARN,\n      [constants.SOCKET_CLI_SHADOW_PROGRESS]: true,\n      ...ipc,\n    },\n  })\n\n  return { spawnPromise }\n}\n"],"names":["__proto__","env","cwd","spinner","acceptRisks","dlxCommands","installCommands","managerName","rawArgs","viewAllRisks","process","debugFn","spawnPromise"],"mappings":";;;;;;;;;;AA2BA;AAEA;AAQe;AAKb;AAAeA;;;;AACPC;;;AAAiC;;AAEnCC;AAAoB;;AAExBA;AACF;AAEA;AACA;;AAEQC;AAAQ;AAChB;;;AAIA;AACA;AACA;AACEC;;;AAGAC;AACAC;AACAC;AACAC;;AAEAC;AACF;;AAGE;AACAC;AACA;AACA;AACF;;AAIA;;AAGAC;AAKA;;AAEA;;AAEA;AACA;AAEA;AAII;;AAEAV;;;;;AAKA;AACA;AACA;;;;AAMJ;AACAW;;AAEI;AACA;AACA;;AAEF;AACF;;AAESA;;AACX;;","debugId":"673b7dc1-02c4-46a2-b70b-e0f78c541d47"}