import type { CResult } from '../types.mts';
import type { Spinner } from '@socketsecurity/registry/lib/spinner';
import type { SocketSdkOperations, SocketSdkResult, SocketSdkSuccessResult } from '@socketsecurity/sdk';
export type CommandRequirements = {
    permissions?: string[] | undefined;
    quota?: number | undefined;
};
// The Socket API server that should be used for operations.
export declare function getDefaultApiBaseUrl(): string | undefined;
/**
 * Get user-friendly error message for HTTP status codes.
 */
export declare function getErrorMessageForHttpStatusCode(code: number): Promise<string>;
export type HandleApiCallOptions = {
    description?: string | undefined;
    spinner?: Spinner | undefined;
    commandPath?: string | undefined;
};
export type ApiCallResult<T extends SocketSdkOperations> = CResult<SocketSdkSuccessResult<T>['data']>;
/**
 * Handle Socket SDK API calls with error handling and permission logging.
 */
export declare function handleApiCall<T extends SocketSdkOperations>(value: Promise<SocketSdkResult<T>>, options?: HandleApiCallOptions | undefined): Promise<ApiCallResult<T>>;
export declare function handleApiCallNoSpinner<T extends SocketSdkOperations>(value: Promise<SocketSdkResult<T>>, description: string): Promise<CResult<SocketSdkSuccessResult<T>['data']>>;
export declare function queryApi(path: string, apiToken: string): Promise<Response>;
/**
 * Query Socket API endpoint and return text response with error handling.
 */
export declare function queryApiSafeText(path: string, description?: string | undefined, commandPath?: string | undefined): Promise<CResult<string>>;
/**
 * Query Socket API endpoint and return parsed JSON response.
 */
export declare function queryApiSafeJson<T>(path: string, description?: string): Promise<CResult<T>>;
export type SendApiRequestOptions = {
    method: 'POST' | 'PUT';
    body?: unknown | undefined;
    description?: string | undefined;
    commandPath?: string | undefined;
};
/**
 * Send POST/PUT request to Socket API with JSON response handling.
 */
export declare function sendApiRequest<T>(path: string, options?: SendApiRequestOptions | undefined): Promise<CResult<T>>;
//# sourceMappingURL=api.d.mts.map