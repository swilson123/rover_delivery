import type { ShadowBinOptions, ShadowBinResult } from '../shadow/npm-base.mts';
import type { CResult } from '../types.mts';
import type { SpawnExtra } from '@socketsecurity/registry/lib/spawn';
export type DlxOptions = ShadowBinOptions & {
    force?: boolean | undefined;
    agent?: 'npm' | 'pnpm' | 'yarn' | undefined;
    silent?: boolean | undefined;
};
export type DlxPackageSpec = {
    name: string;
    version: string;
};
/**
 * Spawns a package using dlx-style execution (npx/pnpm dlx/yarn dlx).
 * Automatically detects the appropriate package manager if not specified.
 * Uses force/update flags to ensure the latest version within the range is fetched.
 */
export declare function spawnDlx(packageSpec: DlxPackageSpec, args: string[] | readonly string[], options?: DlxOptions | undefined, spawnExtra?: SpawnExtra | undefined): Promise<ShadowBinResult>;
/**
 * Helper to spawn coana with dlx.
 * Automatically uses force and silent when version is not pinned exactly.
 * Returns a CResult with stdout extraction for backward compatibility.
 */
export declare function spawnCoanaDlx(args: string[] | readonly string[], orgSlug?: string, options?: DlxOptions | undefined, spawnExtra?: SpawnExtra | undefined): Promise<CResult<string>>;
/**
 * Helper to spawn cdxgen with dlx.
 */
export declare function spawnCdxgenDlx(args: string[] | readonly string[], options?: DlxOptions | undefined, spawnExtra?: SpawnExtra | undefined): Promise<ShadowBinResult>;
/**
 * Helper to spawn synp with dlx.
 */
export declare function spawnSynpDlx(args: string[] | readonly string[], options?: DlxOptions | undefined, spawnExtra?: SpawnExtra | undefined): Promise<ShadowBinResult>;
//# sourceMappingURL=dlx.d.mts.map